// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherApplication.Data.DAO;

#nullable disable

namespace WeatherApplication.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240405104421_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherApplication.Data.Entities.Clouds", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("all")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clouds");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Coord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("feels_like")
                        .HasColumnType("float");

                    b.Property<int>("humidity")
                        .HasColumnType("int");

                    b.Property<int>("pressure")
                        .HasColumnType("int");

                    b.Property<double>("temp")
                        .HasColumnType("float");

                    b.Property<double>("temp_max")
                        .HasColumnType("float");

                    b.Property<double>("temp_min")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Coord");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Main", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("feels_like")
                        .HasColumnType("float");

                    b.Property<int>("humidity")
                        .HasColumnType("int");

                    b.Property<int>("pressure")
                        .HasColumnType("int");

                    b.Property<double>("temp")
                        .HasColumnType("float");

                    b.Property<double>("temp_max")
                        .HasColumnType("float");

                    b.Property<double>("temp_min")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Main");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Root", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("base")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cloudsId")
                        .HasColumnType("int");

                    b.Property<int>("cod")
                        .HasColumnType("int");

                    b.Property<int>("coordId")
                        .HasColumnType("int");

                    b.Property<int>("dt")
                        .HasColumnType("int");

                    b.Property<int>("mainId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timezone")
                        .HasColumnType("int");

                    b.Property<int>("visibility")
                        .HasColumnType("int");

                    b.Property<int>("windId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("cloudsId");

                    b.HasIndex("coordId");

                    b.HasIndex("mainId");

                    b.HasIndex("windId");

                    b.ToTable("Root");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Weather", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("RootId")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("main")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.ToTable("Weather");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Wind", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("deg")
                        .HasColumnType("int");

                    b.Property<double>("gust")
                        .HasColumnType("float");

                    b.Property<double>("speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Wind");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Root", b =>
                {
                    b.HasOne("WeatherApplication.Data.Entities.Clouds", "clouds")
                        .WithMany()
                        .HasForeignKey("cloudsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherApplication.Data.Entities.Coord", "coord")
                        .WithMany()
                        .HasForeignKey("coordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherApplication.Data.Entities.Main", "main")
                        .WithMany()
                        .HasForeignKey("mainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherApplication.Data.Entities.Wind", "wind")
                        .WithMany()
                        .HasForeignKey("windId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("clouds");

                    b.Navigation("coord");

                    b.Navigation("main");

                    b.Navigation("wind");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Weather", b =>
                {
                    b.HasOne("WeatherApplication.Data.Entities.Root", null)
                        .WithMany("weather")
                        .HasForeignKey("RootId");
                });

            modelBuilder.Entity("WeatherApplication.Data.Entities.Root", b =>
                {
                    b.Navigation("weather");
                });
#pragma warning restore 612, 618
        }
    }
}
